APP="guilda"

BUILD_HOST=""
BUILD_USER="deploy"
BUILD_AT="/home/deploy/elixir_builds"

PRODUCTION_HOSTS=""
PRODUCTION_USER="deploy"
DELIVER_TO="/home/deploy/elixir_releases"

pre_erlang_get_and_update_deps() {
  # copy it from the local machine to the build host when builing
  local _local_secret_config_file="config/prod.secret.exs"
  if [ "$TARGET_MIX_ENV" = "prod" ]; then
    status "Copying '$_local_secret_config_file' file to build host"
    scp "$_local_secret_config_file" "$BUILD_USER@$BUILD_HOST:$BUILD_AT/config/prod.secret.exs"
  fi
}

pre_erlang_clean_compile() {
  status "Installing NPM dependencies"
  __sync_remote "
    [ -f ~/.profile ] && source ~/.profile
    set -e

    cd '$BUILD_AT'
    npm install --prefix ./assets $SILENCE
  "

  status "Building static files"
  __sync_remote "
    [ -f ~/.profile ] && source ~/.profile
    set -e

    cd '$BUILD_AT'
    mkdir -p priv/static
    npm run deploy --prefix ./assets $SILENCE
  "

  status "Running phx.digest.clean"
  __sync_remote "
    [ -f ~/.profile ] && source ~/.profile
    set -e

    cd '$BUILD_AT'
    APP='$APP' MIX_ENV='$TARGET_MIX_ENV' $MIX_CMD phx.digest.clean $SILENCE
  "

  status "Running phx.digest"
  __sync_remote "
    [ -f ~/.profile ] && source ~/.profile
    set -e

    cd '$BUILD_AT'
    APP='$APP' MIX_ENV='$TARGET_MIX_ENV' $MIX_CMD phx.digest $SILENCE
  "
}

post_extract_release_archive() {
  status "Removing release version start_erl.data file"
  __remote "
    [ -f ~/.profile ] && source ~/.profile
    set -e
    if [ -f $DELIVER_TO/$APP/var/start_erl.data ]; then
      rm $DELIVER_TO/$APP/var/start_erl.data
    fi
  "
}
